EndOutlier[nrow(EndOutlier),7] <- EndOutlier[nrow(EndOutlier)/2,7] + 175
EndOutlier[nrow(EndOutlier),7] # After Adding Outlier
EndOutlierCD <- EndOutlier %>%
model(classical_decomposition(Gas ~ season(4), type = "mult"))
EndOutlier %>%
autoplot(Gas, color = "grey") +
autolayer(components(EndOutlierCD), season_adjust, color = "#FFC300")
Last5Data %>%
autoplot(Gas, color = "lightgrey") +
autolayer(components(GasCD), season_adjust, color = "#FF512A")+
autolayer(components(OutlierCD), season_adjust, color = "#3CC3F6")+
autolayer(components(EndOutlierCD), season_adjust, color = "#FFC300")
EndOutlier %>%
autoplot(Gas, color = "grey") +
autolayer(components(EndOutlierCD), season_adjust, color = "#33D403")
Last5Data %>%
autoplot(Gas, color = "lightgrey") +
autolayer(components(GasCD), season_adjust, color = "#FF512A")+
autolayer(components(OutlierCD), season_adjust, color = "#3CC3F6")+
autolayer(components(EndOutlierCD), season_adjust, color = "#33D403")
Last5Data %>%
autoplot(Gas, color = "white") +
autolayer(components(GasCD), season_adjust, color = "#FF512A")+
autolayer(components(OutlierCD), season_adjust, color = "#3CC3F6")+
autolayer(components(EndOutlierCD), season_adjust, color = "#33D403")
OutlierCD <- ForOutlier %>%
model(classical_decomposition(Gas ~ season(4), type = "mult"))
autoplot(compants(OutlierCD))
OutlierCD <- ForOutlier %>%
model(classical_decomposition(Gas ~ season(4), type = "mult"))
autoplot(compants(OutlierCD))
OutlierCD <- ForOutlier %>%
model(classical_decomposition(Gas ~ season(4), type = "mult"))
autoplot(compents(OutlierCD))
OutlierCD <- ForOutlier %>%
model(classical_decomposition(Gas ~ season(4), type = "mult"))
autoplot(components(OutlierCD))
?classical_decomposition
#For Obtaining Seasonal Details and Trend - Cycle, and Seasonal- Adjust
GasCD <- Last5Data %>%
classical_decomposition(Gas ~ season(4), type = "multiplicative")
components(GasCD)
#For Obtaining Seasonal Details and Trend - Cycle, and Seasonal- Adjust
GasCD <- Last5Data %>%
classical_decomposition(Gas ~ season(4), type = "mult")
components(GasCD)
#For Obtaining Seasonal Details and Trend - Cycle, and Seasonal- Adjust
GasCD <- Last5Data %>%
model(classical_decomposition(Gas ~ season(4), type = "mult"))
components(GasCD)
#For Trend-Cycle
Last5Data %>%
autoplot(Gas, color = "grey") +
autolayer(components(GasCD), trend, color = "orange")
#For Seasonal Incices
autoplot(components(GasCD))
knitr::opts_chunk$set(echo = TRUE)
#install.packages("tsibbledata")
#install.packages("ggplot2")
#install.packages("fpp3")
library(tsibbledata)
library(ggplot2)
library(fpp3)
library(dplyr)
autoplot(aus_production, Beer)
autoplot(aus_production, Tobacco)
autoplot(aus_production, Bricks)
autoplot(aus_production, Cement)
autoplot(aus_production, Electricity)
autoplot(aus_production, Gas)
Last5Data <- tail(aus_production,20) #Last 5 Years = 5 x 4 Quarters = 20 Quarters
autoplot(Last5Data, Gas)
#For Obtaining Seasonal Details and Trend - Cycle, and Seasonal- Adjust
GasCD <- Last5Data %>%
model(classical_decomposition(Gas ~ season(4), type = "mult"))
components(GasCD)
#For Trend-Cycle
Last5Data %>%
autoplot(Gas, color = "grey") +
autolayer(components(GasCD), trend, color = "orange")
#For Seasonal Incices
autoplot(components(GasCD))
#For Seasonal Adjust
Last5Data %>%
autoplot(Gas, color = "grey") +
autolayer(components(GasCD), season_adjust, color = "#FF512A")
ForOutlier <- Last5Data
# ncol(ForOutlier)
nrow(ForOutlier) # Number of Rows
# ForOutlier[,7] - Gas Column
ForOutlier[nrow(ForOutlier)/2,7] # Element to be Replaced
ForOutlier[nrow(ForOutlier)/2,7] <- ForOutlier[nrow(ForOutlier)/2,7] + 175
ForOutlier[nrow(ForOutlier)/2,7] # After Adding Outlier
OutlierCD <- ForOutlier %>%
model(classical_decomposition(Gas ~ season(4), type = "mult"))
#autoplot(components(OutlierCD))
ForOutlier %>%
autoplot(Gas, color = "grey") +
autolayer(components(OutlierCD), season_adjust, color = "#3CC3F6")
Last5Data %>%
autoplot(Gas, color = "lightgrey") +
autolayer(components(OutlierCD), season_adjust, color = "#3CC3F6") +
autolayer(components(GasCD), season_adjust, color = "#FF512A")
EndOutlier <- Last5Data
# ncol(ForOutlier)
nrow(EndOutlier) # Number of Rows
# ForOutlier[,7] - Gas Column
EndOutlier[nrow(EndOutlier),7] # Element to be Replaced
EndOutlier[nrow(EndOutlier),7] <- EndOutlier[nrow(EndOutlier)/2,7] + 175
EndOutlier[nrow(EndOutlier),7] # After Adding Outlier
EndOutlierCD <- EndOutlier %>%
model(classical_decomposition(Gas ~ season(4), type = "mult"))
EndOutlier %>%
autoplot(Gas, color = "grey") +
autolayer(components(EndOutlierCD), season_adjust, color = "#33D403")
Last5Data %>%
autoplot(Gas, color = "white") +
autolayer(components(GasCD), season_adjust, color = "#FF512A")+
autolayer(components(OutlierCD), season_adjust, color = "#3CC3F6")+
autolayer(components(EndOutlierCD), season_adjust, color = "#33D403")
colnames(aus_production)
autoplot(aus_production, Beer)
autoplot(aus_production, Tobacco)
autoplot(aus_production, Bricks)
autoplot(aus_production, Cement)
autoplot(aus_production, Electricity)
autoplot(aus_production, Gas)
colnames(aus_production)
autoplot(aus_production, Beer)
autoplot(aus_production, Tobacco)
autoplot(aus_production, Bricks)
autoplot(aus_production, Cement)
autoplot(aus_production, Electricity)
autoplot(aus_production, Gas)
colnames(aus_production)
#autoplot(aus_production, Beer)
#autoplot(aus_production, Tobacco)
#autoplot(aus_production, Bricks)
#autoplot(aus_production, Cement)
#autoplot(aus_production, Electricity)
autoplot(aus_production, Gas)
?autoplot
?xlab
?aus_production
?title
?main()
?xlab
colnames(aus_production)
#autoplot(aus_production, Beer)
#autoplot(aus_production, Tobacco)
#autoplot(aus_production, Bricks)
#autoplot(aus_production, Cement)
#autoplot(aus_production, Electricity)
autoplot(aus_production, Gas) +
xlab("Time (on Quarterly Basis)") +
ylab("Gas Production (in PetaJoules)") +
ggtitle("Gas Production in Austrilia from Year 2005 (Q3) till 2010 (Q2)")
?ggtitle()
colnames(aus_production)
#autoplot(aus_production, Beer)
#autoplot(aus_production, Tobacco)
#autoplot(aus_production, Bricks)
#autoplot(aus_production, Cement)
#autoplot(aus_production, Electricity)
autoplot(aus_production, Gas) +
xlab("Time (on Quarterly Basis)") +
ylab("Gas Production (in PetaJoules)") +
ggtitle("Gas Production in Austrilia")
?title()
colnames(aus_production)
#autoplot(aus_production, Beer)
#autoplot(aus_production, Tobacco)
#autoplot(aus_production, Bricks)
#autoplot(aus_production, Cement)
#autoplot(aus_production, Electricity)
autoplot(aus_production, Gas) +
xlab("Time (on Quarterly Basis)") +
ylab("Gas Production (in PetaJoules)") +
ggtitle("Gas Production in Australia")
autoplot(Last5Data, Gas) +
xlab("Time (in Quarters)") +
ylab("Gas Productions (in PJ)") +
ggtitle(" Australia's Gas Production, 2005-10")
autoplot(Last5Data, Gas) +
xlab("Time (in Quarters)") +
ylab("Gas Productions (in PJ)") +
ggtitle(" Australia's Gas Production, 2005-2010")
autoplot(Last5Data, Gas) +
xlab("Time (in Quarters)") +
ylab("Gas Productions (in PJ)") +
ggtitle(" Australia's Gas Production from 2005 till 2010")
#For Obtaining Seasonal Details and Trend - Cycle
GasCD <- Last5Data %>%
model(classical_decomposition(Gas ~ season(4), type = "mult"))
components(GasCD)
#For Trend-Cycle
Last5Data %>%
autoplot(Gas, color = "grey") +
autolayer(components(GasCD), trend, color = "orange")
#For Seasonal Incices
autoplot(components(GasCD))
knitr::opts_chunk$set(echo = TRUE)
Last5Data
autoplot(Last5Data, Gas) +
xlab("Time (in Quarters)") +
ylab("Gas Productions (in PJ)") +
ggtitle(" Australia's Gas Production from 2005 till 2010")
#install.packages("tsibbledata")
#install.packages("ggplot2")
#install.packages("fpp3")
library(tsibbledata)
library(dplyr)
library(ggplot2)
library(fpp3)
Last5Data
autoplot(Last5Data, Gas) +
xlab("Time (in Quarters)") +
ylab("Gas Productions (in PJ)") +
ggtitle(" Australia's Gas Production from 2005 till 2010")
?ggplot
?legend
#For Trend-Cycle
Last5Data %>%
autoplot(Gas, color = "grey") +
autolayer(components(GasCD), trend, color = "orange") +
xlab("Time") +
ylab("Gas Production (in PJ)") +
legend("topright")
#For Trend-Cycle
Last5Data %>%
autoplot(Gas, color = "grey") +
autolayer(components(GasCD), trend, color = "orange") +
xlab("Time") +
ylab("Gas Production (in PJ)") +
legend("topright",trend)
#For Trend-Cycle
Last5Data %>%
autoplot(Gas, color = "grey") +
autolayer(components(GasCD), trend, color = "orange") +
xlab("Time") +
ylab("Gas Production (in PJ)") +
legend("topright",GasCD)
#For Trend-Cycle
Last5Data %>%
autoplot(Gas, color = "grey") +
autolayer(components(GasCD), trend, color = "orange") +
xlab("Time") +
ylab("Gas Production (in PJ)") +
legend("topright",components(GasCD))
#For Trend-Cycle
Last5Data %>%
autoplot(Gas, color = "grey") +
autolayer(components(GasCD), trend, color = "orange") +
xlab("Time") +
ylab("Gas Production (in PJ)") +
guides(colour = guide_legend(title = "Trend"))
#For Seasonal Incices
autoplot(components(GasCD))
?guides
#For Trend-Cycle
Last5Data %>%
autoplot(Gas, color = "grey") +
autolayer(components(GasCD), trend, color = "orange") +
xlab("Time") +
ylab("Gas Production (in PJ)") +
ggtitle("Trend Cycle of Australia Gas Production", subtitle = "From Year 2005 (Q3) till 2010 (Q2)")
#For Seasonal Incices
autoplot(components(GasCD))
#For Trend-Cycle
Last5Data %>%
autoplot(Gas, color = "grey") +
autolayer(components(GasCD), trend, color = "orange") +
xlab("Time") +
ylab("Gas Production (in PJ)") +
ggtitle("Trend Cycle of Australia Gas Production", subtitle = "From Year 2005 (Q3) till 2010 (Q2)")
#For Seasonal Incices
autoplot(components(GasCD)) +
xlab("Time") +
ylab("Measure of Gas Production with Multiplicative Decomposition")+
ggtitle("Classical Decomposition of Gas Production", subtitle = "Multiplicative Type - To understand Seasonal Influx")
#For Trend-Cycle
Last5Data %>%
autoplot(Gas, color = "grey") +
autolayer(components(GasCD), trend, color = "orange") +
xlab("Time") +
ylab("Gas Production (in PJ)") +
ggtitle("Trend Cycle of Australia Gas Production", subtitle = "From Year 2005 (Q3) till 2010 (Q2)")
#For Seasonal Incices
autoplot(components(GasCD)) +
xlab("Time") +
ylab("Measure of Gas Production")+
ggtitle("Classical Decomposition of Gas Production", subtitle = "Multiplicative Type - To understand Seasonal Influx")
Last5Data %>% autolayer(components(GasCD), trend, color = "orange")
Last5Data %>% autolayer(components(GasCD), seasonal, color = "orange")
Last5Data %>% autoplot(Gas) %>% autolayer(components(GasCD), seasonal, color = "orange")
Last5Data %>%
autoplot(Gas, color = "grey") +
autolayer(components(GasCD), trend, color = "orange")
Last5Data %>%
autoplot(Gas, color = "grey") +
autolayer(components(GasCD), seasonal, color = "orange")
Last5Data %>%
autoplot(Gas) +
autolayer(components(GasCD), seasonal, color = "orange")
?facet_grid
Last5Data %>%
autoplot(Gas) +
autolayer(components(GasCD), seasonal, color = "orange", scale = "free")
#For Trend-Cycle
Last5Data %>%
autoplot(Gas, color = "grey") +
autolayer(components(GasCD), trend, color = "orange") +
xlab("Time") +
ylab("Gas Production (in PJ)") +
ggtitle("Trend Cycle of Australia Gas Production", subtitle = "From Year 2005 (Q3) till 2010 (Q2)")
#For Seasonal Incices
autoplot(components(GasCD)) +
xlab("Time") +
ylab("Measure of Gas Production")+
ggtitle("Classical Decomposition of Gas Production", subtitle = "Multiplicative Type - To understand Seasonal Influx (Third Sub-Graph)")
knitr::opts_chunk$set(echo = TRUE)
#install.packages("tsibbledata")
#install.packages("ggplot2")
#install.packages("fpp3")
library(tsibbledata)
library(dplyr)
library(ggplot2)
library(fpp3)
colnames(aus_production)
#autoplot(aus_production, Beer)
#autoplot(aus_production, Tobacco)
#autoplot(aus_production, Bricks)
#autoplot(aus_production, Cement)
#autoplot(aus_production, Electricity)
autoplot(aus_production, Gas) +
xlab("Time (on Quarterly Basis)") +
ylab("Gas Production (in PetaJoules)") +
ggtitle("Gas Production in Australia")
Last5Data <- tail(aus_production,20) #Last 5 Years = 5 x 4 Quarters = 20 Quarters
Last5Data #Data present in Last5Data - Last 5 Years of aus_production
autoplot(Last5Data, Gas) +
xlab("Time (in Quarters)") +
ylab("Gas Productions (in PJ)") +
ggtitle(" Australia's Gas Production from 2005 till 2010")
#For Obtaining Seasonal Details and Trend - Cycle
GasCD <- Last5Data %>%
model(classical_decomposition(Gas ~ season(4), type = "mult"))
components(GasCD)
#For Seasonal Adjust
Last5Data %>%
autoplot(Gas, color = "grey") +
autolayer(components(GasCD), season_adjust, color = "#FF512A") +
xlab("Time") +
ylab("Gas Production (in PJ)") +
ggtitle("Actual Gas Prodcution v/s Seasonal Adjustments for Gas Production", subtitle = "Classical Decomposiiton of Multiplicative Type")
aus_production
knitr::opts_chunk$set(echo = TRUE)
#install.packages("tsibbledata")
#install.packages("ggplot2")
#install.packages("fpp3")
library(tsibbledata)
library(dplyr)
library(ggplot2)
library(fpp3)
aus_production
aus_production$Quarter>2005
as.numeric(aus_production$Quarter)>2005
class(aus_production$Quarter)
?yearquarter
aus_production$Quarter(year > 2005)
aus_production %>% filter(Quarter > yearqtr(2005))
aus_production %>% filter(Quarter > as.yearqtr(2005))
aus_production %>% filter(Quarter >= 2005)
aus_production %>% filter(Quarter >= yearquarter(2005))
as.character(aus_production$Quarter)
as.numeric(aus_production$Quarter)
TestQtr = yearquarter("2005 Q1")
aus_production %>% filter(Quarter >= TestQtr)
aus_production %>% filter(Quarter >= yearquarter("2005 Q1"))
aus_production %>% filter(year(Quarter) >= year("2005"))
aus_production %>% filter(year(Quarter) >= year("2005", format = "YYYY"))
aus_production %>% filter(year(Quarter) >= year("2005", format = "%Y"))
tinytex::install_tinytex()
?classical_decomposition()
as_tsibble(USAccDeaths) %>%
model(classical_decomposition(value ~ season(12), type = "mult")) %>%
components()
?%>%
help(%>%)
library(tidyr)
as_tsibble(USAccDeaths) %>%
model(classical_decomposition(value ~ season(12), type = "mult")) %>%
components()
?components()
library(fpp3)
as_tsibble(USAccDeaths) %>%
model(classical_decomposition(value ~ season(12), type = "mult")) %>%
components()
as_tsibble(USAccDeaths) %>%
model(classical_decomposition(value ~ season(12), type = "addt")) %>%
components()
as_tsibble(USAccDeaths) %>%
model(classical_decomposition(value ~ season(12), type = "additive")) %>%
components()
as_tsibble(USAccDeaths) %>%
model(classical_decomposition(value ~ season(12), type = "addi")) %>%
components()
model(classical_decomposition(value ~ season(12), type = "addi")) %>%
##complaints.csv
cD <- read.csv("C:/Users/vk0589/OneDrive - UNT System/Datasets/complaints.csv")
##complaints.csv
cD <- read.csv("C:/Users/vk0589/OneDrive - UNT System/Datasets/complaints.csv")
head(cD)
cd[cD$Complaint.ID == 7452868,]
cD[cD$Complaint.ID == 7452868,]
##Consumer_Complaints.csv
read.csv("C:/Users/vk0589/OneDrive - UNT System/Documents/UNT/Courses/ADTA_5240/ProjectDatasets/Consumer_Complaints.csv", stringsAsFactors = TRUE) -> rd
head(rd)
rd[rd$Complaint.ID == 7452868,]
summary(rd$Complaint.ID)
View(cD)
#Go to Working Directry where complaints.csv is present
setwd("C:/Users/vk0589/OneDrive - UNT System/Documents/UNT/Courses/ADTA_5240/FinalProject/RStuff")
CData <- read.csv("C:/Users/vk0589/OneDrive - UNT System/Documents/UNT/Courses/ADTA_5240/FinalProject/ProjectDatasets/complaints.csv")
library(dplyr)
summary(CData)
names(CData)
#Renaming Column Names ----
CData2 <- CData
names(CData2) <- c("DateReceived",
"Product",
"SubProduct",
"Issue",
"SubIssue",
"ComplaintNarrative",
"CompanyPulicResponse",
"Company",
"State",
"ZIPCode",
"Tags",
"ConsumerConsent",
"SubmittedVia",
"DateSentToCompany",
"CompanyResponseToConsumer",
"TimelyResponse",
"ConsumerDisputed",
"ComplaintID")
head(CData2)
#Type Conversion ----
CData2$DateReceived <- as.Date(CData2$DateReceived)
CData2$Product <- as.factor(CData2$Product)
CData2$SubProduct <- as.factor(CData2$SubProduct)
CData2$Issue <- as.factor(CData2$SubIssue)
CData2$Company <- as.factor(CData2$Company)
CData2$State <- as.factor(CData2$State)
CData2$ZIPCode <- as.factor(CData2$ZIPCode)
CData2$Tags <- as.factor(CData2$Tags)
CData2$ConsumerConsent <- as.factor(CData2$ConsumerConsent)
CData2$SubmittedVia <- as.factor(CData2$SubmittedVia)
CData2$DateSentToCompany <- as.Date(CData2$DateSentToCompany)
CData2$CompanyResponseToConsumer <- as.factor(CData2$CompanyResponseToConsumer)
CData2$TimelyResponse <- as.factor(CData2$TimelyResponse)
CData2$ConsumerDisputed <- as.factor(CData2$ConsumerDisputed)
summary(CData2$Product)
CDataReq <- CData2 %>%
select(c(1:5, 8:18)) #Removing ComplaintNarriative and CompanyPublicResponse Cols.
#Getting Credit Data ----
##Only Credit Card ----
CreditOnly <- CData2 %>%
filter(Product == "Credit card") #Information of only Product = 'Credit card'
##Credit Card + 3 Columns ----
CreditPartial <- CData2 %>%
filter(Product == "Credit card"|
Product == "Credit card or prepaid card"|
Product == "Credit reporting"|
Product == "Credit reporting or other personal consumer reports")
##All 5 Columns containing word 'Credit' ----
CreditFull <- CData2 %>%
filter(Product == "Credit card"|
Product == "Credit card or prepaid card"|
Product == "Credit reporting"|
Product == "Credit reporting or other personal consumer reports"|
Product == "Credit reporting, credit repair services, or other personal consumer reports")
#Above 3 datasets without ComplaintNarrative and CompanyPublicResponse
##Only Credit Card ----
CreditOnly16 <- CDataReq %>%
filter(Product == "Credit card") #Information of only Product = 'Credit card'
##Credit Card + 3 Columns ----
CreditPartial16 <- CDataReq %>%
filter(Product == "Credit card"|
Product == "Credit card or prepaid card"|
Product == "Credit reporting"|
Product == "Credit reporting or other personal consumer reports")
##All 5 Columns containing word 'Credit' ----
CreditFull16 <- CDataReq %>%
filter(Product == "Credit card"|
Product == "Credit card or prepaid card"|
Product == "Credit reporting"|
Product == "Credit reporting or other personal consumer reports"|
Product == "Credit reporting, credit repair services, or other personal consumer reports")
#Experiments ----
#CSV doesn't work at columns data has ',' in-between
##Exporting in tabSpace
write.table(CreditOnly, "C:/Users/vk0589/OneDrive - UNT System/Documents/UNT/Courses/ADTA_5240/FinalProject/ProjectDatasets/Experiments/CreditOnly.tsv",
row.names = FALSE, quote = FALSE, sep = "\t") #Didn't work for 18
write.table(CreditOnly16, "C:/Users/vk0589/OneDrive - UNT System/Documents/UNT/Courses/ADTA_5240/FinalProject/ProjectDatasets/Experiments/CreditOnly16.tsv",
row.names = FALSE, quote = FALSE, sep = "\t") #Worked for 16 Columns
write.table(CreditOnly, "C:/Users/vk0589/OneDrive - UNT System/Documents/UNT/Courses/ADTA_5240/FinalProject/ProjectDatasets/Experiments/CreditOnlyTT.tsv",
row.names = FALSE, quote = FALSE, sep = "\t\t") #NotPossible with Limitations of GCP
#Creating CreditPartil16 and CreditFull16 with tabSpace
write.table(CreditPartial16, "C:/Users/vk0589/OneDrive - UNT System/Documents/UNT/Courses/ADTA_5240/FinalProject/ProjectDatasets/Experiments/CreditPartial16.tsv",
row.names = FALSE, quote = FALSE, sep = "\t")
